{"version":3,"sources":["api/Auth.js","api/AxiosInstance.js","component/AddCredentials.jsx","App.js","serviceWorker.js","index.js"],"names":["credentials","axiosInstance","post","JSON","parse","localStorage","getItem","headers","Authorization","this","getUserInfo","token","removeItem","window","location","href","userInfo","JwtDecode","auth","role","roles","getRoles","indexOf","console","log","AuthService","axios","create","baseURL","process","isHandlerEnabled","config","hasOwnProperty","handlerEnabled","interceptors","request","use","getAuthorization","requestHandler","response","error","data","alert","Promise","reject","errorHandler","AddCredentials","redirectUrl","queryString","search","redirect","enableReinitialize","initialValues","validate","values","errors","merchantID","merchantPassword","onSubmit","setSubmitting","then","status","handleChange","touched","handleBlur","handleSubmit","isSubmitting","Form","className","Field","Label","Input","type","value","onChange","onBlur","name","placeholder","component","Button","disabled","App","Menu","Item","header","Grid","centered","columns","Column","Segment","basepath","path","Rail","position","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fd1a269c.chunk.js","sourcesContent":["import JwtDecode from 'jwt-decode';\nimport axiosInstance from './AxiosInstance';\n\nexport class AuthService {\n\n  login(credentials) {\n    return axiosInstance.post(\"auth\", credentials);\n  }\n\n  getUserInfo() {\n    return JSON.parse(localStorage.getItem(\"userInfo\"));\n  }\n\n  getAuthHeader() {\n    return { headers: { Authorization: 'Bearer ' + this.getUserInfo().token } };\n  }\n\n  getAuthorization() {\n    if (this.getUserInfo()) {\n      return 'Bearer ' + this.getUserInfo().token;\n    } else {\n      return \"\";\n    }\n  }\n\n  logOut() {\n    localStorage.removeItem(\"userInfo\");\n    window.location.href = '/';\n  }\n\n  getRoles() {\n    const userInfo = this.getUserInfo();\n    if (!userInfo || !userInfo.token) {\n      return null;\n    }\n\n    const jwt = JwtDecode(userInfo.token);\n    return jwt.auth;\n  }\n\n  hasRole(role) {\n    const roles = this.getRoles();\n\n    if (!this.getRoles())\n      return false;\n\n    return roles.indexOf(role) !== -1;\n  }\n\n}\n\nexport default new AuthService();\n","import axios from 'axios';\nimport AuthService from './Auth';\n\nconst hosts = {\n    development: 'https://localhost:8442/',\n    production: process.env.PUBLIC_URL\n};\n\nconsole.log(AuthService);\n\nconst isLoggedIn = AuthService.getRoles() != null;\n\nconst axiosInstance = axios.create({\n    baseURL: hosts[process.env.NODE_ENV]\n});\n\nconst isHandlerEnabled = (config = {}) => {\n    return config.hasOwnProperty('handlerEnabled') && !config.handlerEnabled ? false : true\n};\n\nconst requestHandler = (request) => {\n    if (isHandlerEnabled(request)) {\n        request.headers['Authorization'] = AuthService.getAuthorization();\n    }\n    return request\n};\n\nconst errorHandler = (error) => {\n    if (isHandlerEnabled(error.config)) {\n        if (error.response && error.response.data) {\n            alert(\"Something Went Wrong\");\n        }\n    }\n    return Promise.reject({ ...error })\n};\n\naxiosInstance.interceptors.request.use(\n    request => requestHandler(request)\n);\naxiosInstance.interceptors.response.use(response => response, error => errorHandler(error));\n\nexport default axiosInstance;\n","import React from 'react';\nimport { Formik, ErrorMessage } from 'formik';\nimport { Button, Form, Label, Input } from 'semantic-ui-react';\nimport axiosInstance from '../api/AxiosInstance';\nimport * as queryString from 'query-string';\n\nconst AddCredentials = ({ location }) => {\n  const queryParams = queryString.parse(location.search);\n  const redirectUrl = '/' + (queryParams.redirect || '');\n\n  const submitCredentials = (credentials) => {\n    axiosInstance.post('/api/credentials', credentials).then((response) => {\n      if (response.status === 200) {\n        window.location = redirectUrl;\n      }\n    });\n  };\n\n  return (\n    <Formik\n      enableReinitialize={true}\n      initialValues={{}}\n      validate={values => {\n        const errors = {};\n\n        if (!values.merchantID) {\n          errors.merchantID = 'Required!'\n        }\n        if (!values.merchantPassword) {\n          errors.merchantPassword = 'Required!';\n        }\n\n        return errors;\n      }}\n      onSubmit={(values, { setSubmitting }) => {\n        submitCredentials(values);\n      }}\n    >\n      {({\n        values,\n        errors,\n        touched,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        isSubmitting,\n      }) => (\n\n          <Form onSubmit={handleSubmit} className=\"ui form\">\n            <Form.Field >\n              <Label>Merchant ID</Label>\n              <Input type=\"text\" value={values.merchantID} onChange={handleChange} onBlur={handleBlur} name=\"merchantID\" placeholder=\"Merchant ID\" ></Input>\n              <ErrorMessage name=\"merchantID\" component=\"div\" />\n            </Form.Field>\n\n            <Form.Field >\n              <Label>Merchant Password</Label>\n              <Input type=\"password\" value={values.merchantPassword} onChange={handleChange} onBlur={handleBlur} name=\"merchantPassword\" placeholder=\"Merchant Password\" ></Input>\n\n              <ErrorMessage name=\"merchantPassword\" component=\"div\" />\n            </Form.Field>\n\n            <Button type=\"submit\" disabled={isSubmitting}>\n              Save\n            </Button>\n\n          </Form>\n        )}\n    </Formik>\n  );\n};\n\nexport default AddCredentials;","import React from 'react';\nimport './App.css';\nimport { Grid, Segment, Rail, Menu, Label } from 'semantic-ui-react';\nimport { Router } from '@reach/router';\nimport AddCredentials from './component/AddCredentials';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Menu>\n        <Menu.Item header>Bank Payment Service</Menu.Item>\n      </Menu>\n\n      <Grid centered columns={3}>\n        <Grid.Column>\n          <Segment>\n\n            <Router basepath={process.env.PUBLIC_URL}>\n              <AddCredentials path=\"/credentials\"></AddCredentials>\n            </Router>\n\n            <Rail position='left'>\n              {/* <Segment>Left Rail Content</Segment> */}\n            </Rail>\n\n            <Rail position='right'>\n              {/* <Segment>Right Rail Content</Segment> */}\n            </Rail>\n          </Segment>\n        </Grid.Column>\n      </Grid>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}